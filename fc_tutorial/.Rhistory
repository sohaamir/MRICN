getwd()
# Load the ggplot2 library
library(ggplot2)
install.packages(ggplot2)
library(ggplot2)
# Load the ggplot2 library
install.packages(ggplot2)
# Load the ggplot2 library
install.packages(ggplot)
install.packages("ggplot2")
library(ggplot2)
# Create a sample dataset with date, glucose, hormones, and calcium values
# Replace this with your actual data
set.seed(123)
date <- seq(as.Date("2023-01-01"), by="1 week", length.out=13)
glucose <- rnorm(13, mean = 100, sd = 10)
hormones <- rnorm(13, mean = 50, sd = 5)
calcium <- rnorm(13, mean = 200, sd = 15)
data <- data.frame(date, glucose, hormones, calcium)
# Create the line plot
plot <- ggplot(data, aes(x = date)) +
geom_line(aes(y = glucose, color = "Glucose"), size = 1) +
geom_line(aes(y = hormones, color = "Hormones"), size = 1) +
geom_line(aes(y = calcium, color = "Calcium"), size = 1) +
# Customize the appearance for publication and presentation
theme_minimal() +
labs(title = "Variation of Glucose, Hormones, and Calcium Over 3 Months",
x = "Date",
y = "Value") +
scale_color_manual(values = c("Glucose" = "blue", "Hormones" = "red", "Calcium" = "green")) +
theme(legend.position = "none") +
scale_x_date(date_labels = "%b %d", date_breaks = "1 week")
# Save the plot to a file (e.g., a PNG or PDF)
ggsave("line_plot.png", plot, width = 8, height = 4, dpi = 300)
# Display the plot
print(plot)
# Load required packages
library(ggplot2)
library(ggthemes)
install.packages("ggthemes")
library(ggplot2)
library(ggthemes)
library(ggplot2movies)
install.packages("ggthemes")
install.packages("ggplot2movies")
library(ggplot2)
library(ggthemes)
library(ggplot2movies)
# Create a sample dataset with date, glucose, hormones, and calcium values
# Replace this with your actual data
set.seed(123)
date <- seq(as.Date("2023-01-01"), by="1 week", length.out=13)
glucose <- rnorm(13, mean = 100, sd = 10)
hormones <- rnorm(13, mean = 50, sd = 5)
calcium <- rnorm(13, mean = 200, sd = 15)
data <- data.frame(date, glucose, hormones, calcium)
# Create the line plot with shaded errors
plot <- ggplot(data, aes(x = date)) +
geom_line(aes(y = glucose, color = "Glucose"), size = 1) +
geom_ribbon(aes(ymin = glucose - 5, ymax = glucose + 5, fill = "Glucose"), alpha = 0.2) +
geom_line(aes(y = hormones, color = "Hormones"), size = 1) +
geom_ribbon(aes(ymin = hormones - 3, ymax = hormones + 3, fill = "Hormones"), alpha = 0.2) +
geom_line(aes(y = calcium, color = "Calcium"), size = 1) +
geom_ribbon(aes(ymin = calcium - 10, ymax = calcium + 10, fill = "Calcium"), alpha = 0.2) +
# Customize the appearance for a presentation or app
theme_fivethirtyeight() +
labs(title = "Variation of Glucose, Hormones, and Calcium Over 3 Months",
x = "Date",
y = "Value") +
scale_color_manual(values = c("Glucose" = "blue", "Hormones" = "red", "Calcium" = "green")) +
scale_fill_manual(values = c("Glucose" = "blue", "Hormones" = "red", "Calcium" = "green")) +
theme(legend.position = "none",
axis.text = element_text(size = 12, color = "black", family = "Arial"),
axis.title = element_text(size = 14, color = "black", family = "Arial"),
plot.title = element_text(size = 16, color = "black", family = "Arial")) +
scale_x_date(date_labels = "%b %d", date_breaks = "1 week")
# Display the plot
print(plot)
install.packages("ggthemes")
set.seed(123)
date <- seq(as.Date("2023-01-01"), by="1 week", length.out=13)
glucose <- rnorm(13, mean = 100, sd = 10)
hormones <- rnorm(13, mean = 50, sd = 5)
calcium <- rnorm(13, mean = 200, sd = 15)
data <- data.frame(date, glucose, hormones, calcium)
# Calculate the mean values for each factor
mean_glucose <- mean(data$glucose)
mean_hormones <- mean(data$hormones)
mean_calcium <- mean(data$calcium)
# Create the line plot with shaded errors
plot <- ggplot(data, aes(x = date)) +
geom_line(aes(y = glucose, color = "Glucose"), size = 1) +
geom_ribbon(aes(ymin = glucose - 5, ymax = glucose + 5, fill = "Glucose"), alpha = 0.2) +
geom_line(aes(y = hormones, color = "Hormones"), size = 1) +
geom_ribbon(aes(ymin = hormones - 3, ymax = hormones + 3, fill = "Hormones"), alpha = 0.2) +
geom_line(aes(y = calcium, color = "Calcium"), size = 1) +
geom_ribbon(aes(ymin = calcium - 10, ymax = calcium + 10, fill = "Calcium"), alpha = 0.2) +
# Add mean lines
geom_hline(yintercept = mean_glucose, color = "blue", linetype = "dashed") +
geom_hline(yintercept = mean_hormones, color = "red", linetype = "dashed") +
geom_hline(yintercept = mean_calcium, color = "green", linetype = "dashed") +
# Customize the appearance for a presentation or app
theme_fivethirtyeight() +
labs(title = "Variation of Glucose, Hormones, and Calcium Over 3 Months",
x = "Date",
y = "Value") +
scale_color_manual(values = c("Glucose" = "blue", "Hormones" = "red", "Calcium" = "green")) +
scale_fill_manual(values = c("Glucose" = "blue", "Hormones" = "red", "Calcium" = "green")) +
theme(legend.position = "none",
axis.text = element_text(size = 12, color = "black", family = "Arial"),
axis.title = element_text(size = 14, color = "black", family = "Arial"),
plot.title = element_text(size = 16, color = "black", family = "Arial"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_x_date(date_labels = "%b %d", date_breaks = "1 week")
# Display the plot
print(plot)
# Create a sample dataset with date, glucose, hormones, and calcium values
# Replace this with your actual data
set.seed(123)
date <- seq(as.Date("2023-01-01"), by="1 week", length.out=13)
glucose <- rnorm(13, mean = 100, sd = 10)
hormones <- rnorm(13, mean = 50, sd = 5)
calcium <- rnorm(13, mean = 200, sd = 15)
data <- data.frame(date, glucose, hormones, calcium)
# Calculate the mean values for each factor
mean_glucose <- mean(data$glucose)
mean_hormones <- mean(data$hormones)
mean_calcium <- mean(data$calcium)
# Create the line plot with shaded errors
plot <- ggplot(data, aes(x = date)) +
geom_line(aes(y = glucose, color = "Glucose"), size = 1.5) +
geom_ribbon(aes(ymin = glucose - 5, ymax = glucose + 5, fill = "Glucose"), alpha = 0.2) +
geom_line(aes(y = hormones, color = "Hormones"), size = 1.5) +
geom_ribbon(aes(ymin = hormones - 3, ymax = hormones + 3, fill = "Hormones"), alpha = 0.2) +
geom_line(aes(y = calcium, color = "Calcium"), size = 1.5) +
geom_ribbon(aes(ymin = calcium - 10, ymax = calcium + 10, fill = "Calcium"), alpha = 0.2) +
# Add mean lines
geom_hline(yintercept = mean_glucose, color = "blue", linetype = "dashed") +
geom_hline(yintercept = mean_hormones, color = "red", linetype = "dashed") +
geom_hline(yintercept = mean_calcium, color = "green", linetype = "dashed") +
# Customize the appearance for a presentation or app
theme_minimal() +
labs(title = "Variation of Glucose, Hormones, and Calcium Over 3 Months",
x = "Date",
y = "Value") +
scale_color_manual(values = c("Glucose" = "blue", "Hormones" = "red", "Calcium" = "green")) +
scale_fill_manual(values = c("Glucose" = "blue", "Hormones" = "red", "Calcium" = "green")) +
theme(legend.position = "none",
axis.text = element_text(size = 14, color = "black", family = "Arial"),
axis.title = element_text(size = 16, color = "black", family = "Arial"),
plot.title = element_text(size = 18, color = "black", family = "Arial"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_x_date(date_labels = "%b %d", date_breaks = "1 week")
# Display the plot
print(plot)
# Create a sample dataset
set.seed(123)
date <- seq(as.Date("2023-01-01"), by="1 week", length.out=13)
glucose <- rnorm(13, mean = 100, sd = 10)
hormones <- rnorm(13, mean = 50, sd = 5)
calcium <- rnorm(13, mean = 200, sd = 15)
data <- data.frame(date, glucose, hormones, calcium)
# Create the plot with Apple-like style
plot <- ggplot(data, aes(x = date)) +
geom_line(aes(y = glucose, color = "Glucose"), size = 2) +
geom_line(aes(y = hormones, color = "Hormones"), size = 2) +
geom_line(aes(y = calcium, color = "Calcium"), size = 2) +
scale_color_manual(values = c("Glucose" = "#00a5e0", "Hormones" = "#4cd964", "Calcium" = "#ff9500")) +
scale_fill_manual(values = c("Glucose" = "#00a5e0", "Hormones" = "#4cd964", "Calcium" = "#ff9500")) +
labs(
title = "Health Data",
x = "Date",
y = "Value"
) +
theme_minimal() +
theme(
axis.title = element_text(size = 18, color = "black", family = "Helvetica Neue"),
axis.text = element_text(size = 14, color = "black", family = "Helvetica Neue"),
plot.title = element_text(size = 20, color = "black", family = "Helvetica Neue"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()
)
print(plot)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
library("rstan") # observe startup messages
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
# install.packages("remotes")
remotes::install_github("stan-dev/cmdstanr")
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
example(stan_model, package = "rstan", run.dontrun = TRUE)
getwd()
setwd("/Users/aamirsohail/Documents/GitHub/MRICN/fc_tutorial")
getwd()
